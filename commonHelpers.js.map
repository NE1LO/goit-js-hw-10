{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n// ---------------------------------------\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.css';\n\nconst convertMs = ms => {\n  const second = 1000,\n    minute = second * 60,\n    hour = minute * 60,\n    day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n};\n\nconst formatWithLeadingZero = value => `${value}`.padStart(2, '0');\n\nconst dateTimePicker = document.querySelector('#datetime-picker');\nconst startButton = document.querySelector('[data-start]');\nconst daysElement = document.querySelector('[data-days]');\nconst hoursElement = document.querySelector('[data-hours]');\nconst minutesElement = document.querySelector('[data-minutes]');\nconst secondsElement = document.querySelector('[data-seconds]');\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose: selectedDates => {\n    if (selectedDates[0].getTime() < Date.now()) {\n      iziToast.error({\n        message: 'Please choose a date in the future',\n        position: 'topCenter',\n        backgroundColor: 'red',\n        messageColor: '#fff',\n      });\n    } else {\n      startButton.classList.toggle('btn-inactive');\n      startButton.addEventListener('click', () => {\n        const interval = setInterval(() => {\n          const time = convertMs(selectedDates[0].getTime() - Date.now());\n          daysElement.textContent = formatWithLeadingZero(time.days);\n          hoursElement.textContent = formatWithLeadingZero(time.hours);\n          minutesElement.textContent = formatWithLeadingZero(time.minutes);\n          secondsElement.textContent = formatWithLeadingZero(time.seconds);\n          if (\n            daysElement.textContent === '00' &&\n            hoursElement.textContent === '00' &&\n            minutesElement.textContent === '00' &&\n            secondsElement.textContent === '00'\n          ) {\n            clearInterval(interval);\n          }\n        }, 1000);\n        startButton.classList.toggle('btn-inactive');\n        dateTimePicker.classList.toggle('btn-inactive');\n      });\n    }\n  },\n};\n\nconst timer = flatpickr('#datetime-picker', options);\n"],"names":["convertMs","ms","days","hours","minutes","seconds","formatWithLeadingZero","value","dateTimePicker","startButton","daysElement","hoursElement","minutesElement","secondsElement","options","selectedDates","iziToast","interval","time","flatpickr"],"mappings":"6vBAMA,MAAMA,EAAYC,GAAM,CAMtB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,EAEMC,EAAwBC,GAAS,GAAGA,IAAQ,SAAS,EAAG,GAAG,EAE3DC,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAc,SAAS,cAAc,aAAa,EAClDC,EAAe,SAAS,cAAc,cAAc,EACpDC,EAAiB,SAAS,cAAc,gBAAgB,EACxDC,EAAiB,SAAS,cAAc,gBAAgB,EAExDC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAASC,GAAiB,CACpBA,EAAc,GAAG,QAAO,EAAK,KAAK,MACpCC,EAAS,MAAM,CACb,QAAS,qCACT,SAAU,YACV,gBAAiB,MACjB,aAAc,MACtB,CAAO,GAEDP,EAAY,UAAU,OAAO,cAAc,EAC3CA,EAAY,iBAAiB,QAAS,IAAM,CAC1C,MAAMQ,EAAW,YAAY,IAAM,CACjC,MAAMC,EAAOlB,EAAUe,EAAc,GAAG,UAAY,KAAK,IAAG,CAAE,EAC9DL,EAAY,YAAcJ,EAAsBY,EAAK,IAAI,EACzDP,EAAa,YAAcL,EAAsBY,EAAK,KAAK,EAC3DN,EAAe,YAAcN,EAAsBY,EAAK,OAAO,EAC/DL,EAAe,YAAcP,EAAsBY,EAAK,OAAO,EAE7DR,EAAY,cAAgB,MAC5BC,EAAa,cAAgB,MAC7BC,EAAe,cAAgB,MAC/BC,EAAe,cAAgB,MAE/B,cAAcI,CAAQ,CAEzB,EAAE,GAAI,EACPR,EAAY,UAAU,OAAO,cAAc,EAC3CD,EAAe,UAAU,OAAO,cAAc,CACtD,CAAO,EAEJ,CACH,EAEcW,EAAU,mBAAoBL,CAAO"}